// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: url_map.sql

package sqlc

import (
	"context"
)

const checkIfUidExistsInUrlMap = `-- name: CheckIfUidExistsInUrlMap :one
SELECT count(*)
FROM url_map
WHERE uid = $1
`

func (q *Queries) CheckIfUidExistsInUrlMap(ctx context.Context, uid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkIfUidExistsInUrlMap, uid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUrlMap = `-- name: CreateUrlMap :one
INSERT INTO url_map (uid, url)
VALUES ($1, $2)
RETURNING uid, url, time_redirected, created_at
`

type CreateUrlMapParams struct {
	Uid string `json:"uid"`
	Url string `json:"url"`
}

func (q *Queries) CreateUrlMap(ctx context.Context, arg CreateUrlMapParams) (UrlMap, error) {
	row := q.db.QueryRowContext(ctx, createUrlMap, arg.Uid, arg.Url)
	var i UrlMap
	err := row.Scan(
		&i.Uid,
		&i.Url,
		&i.TimeRedirected,
		&i.CreatedAt,
	)
	return i, err
}

const getUrlMap = `-- name: GetUrlMap :one
SELECT uid, url, time_redirected, created_at
from url_map
WHERE uid = $1
LIMIT 1
`

func (q *Queries) GetUrlMap(ctx context.Context, uid string) (UrlMap, error) {
	row := q.db.QueryRowContext(ctx, getUrlMap, uid)
	var i UrlMap
	err := row.Scan(
		&i.Uid,
		&i.Url,
		&i.TimeRedirected,
		&i.CreatedAt,
	)
	return i, err
}

const getUrlMapCount = `-- name: GetUrlMapCount :one
SELECT count(*)
FROM url_map
`

func (q *Queries) GetUrlMapCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUrlMapCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUrlMapRedirectionCount = `-- name: GetUrlMapRedirectionCount :one
SELECT SUM(time_redirected)
FROM url_map
`

func (q *Queries) GetUrlMapRedirectionCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUrlMapRedirectionCount)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}
